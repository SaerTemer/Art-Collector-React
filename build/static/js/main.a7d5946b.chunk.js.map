{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","log","Feature","featuredResult","title","dated","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","images","primaryimageurl","id","length","map","person","key","name","displayname","image","baseimageurl","src","alt","Loading","Preview","searchResults","info","setFeaturedResult","fetchPage","pageUrl","results","error","disabled","prev","next","record","index","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","onSubmit","htmlFor","type","placeholder","onChange","target","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAW,oCACXC,EAAM,8CAKX,SAAeC,EAAtB,oC,4CAAO,WAAiDC,EAAMC,GAAvD,iBAAAC,EAAA,+EAEmBC,MAAM,GAAD,OACvBN,EADuB,mBACJC,EADI,YACGE,EADH,YACWI,UACnCH,EAAMI,MAAM,KAAKC,KAAK,QAJtB,cAEEC,EAFF,gBAOeA,EAASC,OAPxB,cAOEC,EAPF,yBASGA,GATH,wG,sBAkBD,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAT,EAAA,+EAEoBC,MAAMQ,GAF1B,cAEGJ,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeG,EAAtB,kC,4CAAO,uCAAAV,EAAA,6DACLW,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMJ,EALD,UAKUd,EALV,mBAK6BC,EAL7B,2BAKmDgB,EALnD,oBAK6ED,EAL7E,oBAKgGE,GALhG,kBAQoBZ,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,yBAWIA,GAXJ,wG,sBAoBA,SAAeO,IAAtB,+B,4CAAO,kCAAAd,EAAA,0DACDe,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCP,EALD,UAKUd,EALV,oBAK8BC,EAL9B,kDAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAtB,EAAA,0DACDe,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCP,EALD,UAKUd,EALV,2BAKqCC,EALrC,yCAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBC3DP,IAAMI,EAAa,SAACC,GAAW,IACrBC,EAA4DD,EAA5DC,WAAYC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAC/C,OACE,0BAAMC,UAAU,WACd,uBACEC,KAAK,IACLC,QAAO,uCAAE,WAAOC,GAAP,eAAAhC,EAAA,6DACPgC,EAAMC,iBACNN,GAAa,GAFN,kBAIgB9B,EACnB4B,EACAC,GANG,OAICQ,EAJD,OAQLN,EAAiBM,GARZ,gDAULC,QAAQC,IAAR,MAVK,yBAYLT,GAAa,GAZR,4EAAF,uDAgBNF,EACC,oCACE,0BAAMI,UAAU,WAAWH,GAAoB,KAE/C,QAuLGW,EAhJC,SAACb,GACf,GAAIA,EAAMc,eAAgB,CAAC,IAAD,EAiBpBd,EAAMc,eAfRC,EAFsB,EAEtBA,MACAC,EAHsB,EAGtBA,MACAC,EAJsB,EAItBA,YACAC,EALsB,EAKtBA,QACAC,EANsB,EAMtBA,MACAC,EAPsB,EAOtBA,UACAC,EARsB,EAQtBA,OACAC,EATsB,EAStBA,WACAC,EAVsB,EAUtBA,OACAC,EAXsB,EAWtBA,WACAC,EAZsB,EAYtBA,SACAC,EAbsB,EAatBA,QACAC,EAdsB,EActBA,WACAC,EAfsB,EAetBA,OACAC,EAhBsB,EAgBtBA,gBAEF,OACE,0BAAMC,GAAG,WACP,yBAAKzB,UAAU,kBACb,gCACE,4BAAKU,GACL,4BAAKC,IAEP,6BAASX,UAAU,SAChBY,EACC,oCACE,0BAAMZ,UAAU,SAAS,eACzB,0BAAMA,UAAU,WAAWY,GAAoB,KAE/C,KACHC,EACC,oCACE,0BAAMb,UAAU,SAAS,WACzB,kBAAC,EAAD,eACEJ,WAAW,UACXC,YAAagB,GACTlB,IACH,KAEH,KACHmB,EACC,oCACE,0BAAMd,UAAU,SAAS,SACzB,0BAAMA,UAAU,WAAWc,GAAc,KAEzC,KACHC,EACC,oCACE,0BAAMf,UAAU,SAAS,aACzB,0BAAMA,UAAU,WAEZ,kBAAC,EAAD,eACEJ,WAAY,YACZC,YAAakB,GACTpB,KAGF,KAER,KACHqB,EACC,oCACE,0BAAMhB,UAAU,SAAS,UACzB,0BAAMA,UAAU,WACb,kBAAC,EAAD,eACCJ,WAAY,SACZC,YAAamB,GACTrB,KAEA,KAER,KACHsB,EACC,oCACE,0BAAMjB,UAAU,SAAS,cACzB,0BAAMA,UAAU,WAAWiB,GAAmB,KAE9C,KACHC,GAAUA,EAAOQ,OACdR,EAAOS,KAAI,SAACC,GAEV,OADAtB,QAAQC,IAAIqB,GAEV,kBAAC,WAAD,CAAUC,IAAKD,EAAOE,MACpB,0BAAM9B,UAAU,SAAS,UACzB,0BAAMA,UAAU,WAAW4B,EAAOG,aAClC,kBAAC,EAAD,eACFnC,WAAY,qBACZC,YAAa+B,EAAOG,aAChBpC,IACD,QAIP,KACHwB,EACC,oCACE,0BAAMnB,UAAU,SAAS,cACzB,0BAAMA,UAAU,WAAWmB,GAAmB,KAE9C,KACHC,EACC,oCACE,0BAAMpB,UAAU,SAAS,YACzB,0BAAMA,UAAU,WAAWoB,GAAiB,KAE5C,KACHC,EACC,oCACE,0BAAMrB,UAAU,SAAS,WACzB,0BAAMA,UAAU,WAAWqB,GAAgB,KAE3C,KACHC,EACC,oCACE,0BAAMtB,UAAU,SAAS,cACzB,0BAAMA,UAAU,WAAWsB,GAAmB,KAE9C,MAEN,6BAAStB,UAAU,UAChBuB,EAAOG,OACNH,EAAOI,KAAI,SAACK,GACV,OACE,yBACEH,IAAKG,EAAMC,aACXC,IAAKF,EAAMC,aACXE,IAAK,4BAITX,EACF,yBAAKU,IAAKV,EAAiBW,IAAK,yBAC9B,QAMZ,OAAO,0BAAMV,GAAG,aCzNLW,EARC,WACd,OACE,yBAAKX,GAAG,WACN,wBAAIzB,UAAU,WAAd,kBC2GSqC,EAhHC,SAAC1C,GAAU,MAarBA,EAJF2C,cAAiBC,EATM,EASNA,KAAMjD,EATA,EASAA,QACvBS,EAGEJ,EAHFI,iBACAyC,EAEE7C,EAFF6C,kBACA1C,EACEH,EADFG,aAZuB,SAoBV2C,EApBU,8EAoBzB,WAAyBC,GAAzB,eAAAvE,EAAA,6DACE2B,GAAa,GADf,kBAI0BnB,EAAyB+D,GAJnD,OAIUC,EAJV,OAKI5C,EAAiB4C,GALrB,gDAOIrC,QAAQsC,MAAR,MAPJ,yBASI9C,GAAa,GATjB,6EApByB,sBAiCzB,OACE,2BAAO2B,GAAG,WACR,4BAAQzB,UAAU,cAEhB,4BACE6C,UAAWN,EAAKO,KAChB9C,UAAU,WACVE,QAAS,WACP,OAAOuC,EAAUF,EAAKO,QAJ1B,YAUA,4BACED,UAAWN,EAAKQ,KAChB/C,UAAU,OACVE,QAAS,WACP,OAAOuC,EAAUF,EAAKQ,QAJ1B,SAUF,6BAAS/C,UAAU,WAmBfV,EAAQqC,KAAI,SAACqB,EAAQC,GACnB,OACE,yBACEpB,IAAKoB,EACLjD,UAAU,iBACVE,QAAS,SAACC,GAERA,EAAMC,iBAENoC,EAAkBQ,KAMlBA,EAAOxB,gBACL,yBACEU,IAAKc,EAAOxB,gBACZW,IAAKa,EAAOpC,cAEZ,KAKJoC,EAAOtC,MAAQ,4BAAKsC,EAAOtC,OAAc,mDC+C5CwC,EAjJA,SAACvD,GAAU,IAGhBG,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAHE,EAgBcoD,mBAAS,IAhBvB,mBAgBjBC,EAhBiB,KAgBJC,EAhBI,OAiB4BF,mBAAS,IAjBrC,mBAiBjBG,EAjBiB,KAiBGC,EAjBH,OAkBcJ,mBAAS,IAlBvB,mBAkBjBnE,EAlBiB,KAkBJwE,EAlBI,OAmBML,mBAAS,OAnBf,mBAmBjBrE,EAnBiB,KAmBR2E,EAnBQ,OAoBoBN,mBAAS,OApB7B,mBAoBjBpE,EApBiB,KAoBD2E,EApBC,KA2DxB,OA9BAC,qBAAU,WACR,IACEC,QAAQC,IAAI,CAAC5E,IAAqBQ,MAA4BqE,MAC5D,YAAmC,IAAD,mBAAhCC,EAAgC,KAArBC,EAAqB,KAChCX,EAAeU,GACfR,EAAsBS,MAG1B,MAAOpB,GACPtC,QAAQsC,MAAMA,MAEf,IAoBD,0BACEnB,GAAG,SACHwC,SAAQ,uCAAE,WAAO9D,GAAP,eAAAhC,EAAA,6DAERgC,EAAMC,iBACNN,GAAa,GAHL,kBAMgBjB,EAAkB,CACtCC,UACAC,iBACAC,gBATI,OAMA2D,EANA,OAWN5C,EAAiB4C,GAXX,gDAaNrC,QAAQsC,MAAR,MAbM,yBAeN9C,GAAa,GAfP,4EAAF,uDAmBR,kCACE,2BAAOoE,QAAQ,YAAf,SACA,2BACEzC,GAAG,WACH0C,KAAK,OACLC,YAAY,oBACZlG,MAAOc,EACPqF,SAAU,SAAClE,GACTqD,EAAerD,EAAMmE,OAAOpG,WAIlC,kCACE,2BAAOgG,QAAQ,yBAAf,iBACiB,IACf,0BAAMlE,UAAU,wBAAhB,IACIsD,EAAmB5B,OADvB,MAIF,4BACEI,KAAK,iBACLL,GAAG,wBACHvD,MAAOa,EACPsF,SAAU,SAAClE,GACTuD,EAAkBvD,EAAMmE,OAAOpG,SAGjC,4BAAQA,MAAM,OAAd,OACCoF,EAAmB3B,KAAI,SAAC5C,GACvB,OACE,4BAAQb,MAAOa,EAAe+C,KAAMD,IAAK9C,EAAe+C,MACrD/C,EAAe+C,WAM1B,kCACE,2BAAOoC,QAAQ,kBAAf,WACU,0BAAMlE,UAAU,iBAAhB,IAAkCoD,EAAY1B,OAA9C,MAEV,4BACEI,KAAK,UACLL,GAAG,iBACHvD,MAAOY,EACPuF,SAAU,SAAClE,GACTsD,EAAWtD,EAAMmE,OAAOpG,SAG1B,4BAAQA,MAAM,OAAd,OACCkF,EAAYzB,KAAI,SAAC7C,GAChB,OACE,4BAAQZ,MAAOY,EAAQgD,KAAMD,IAAK/C,EAAQgD,MACvChD,EAAQgD,WAMnB,4CC/HSyC,EATD,WACZ,OACE,yBAAK9C,GAAG,SACN,iDACA,qFCbA+C,EAAM,WAAM,MAU0BrB,mBAAS,CAAEZ,KAAM,GAAIjD,QAAS,KAVxD,mBAUTgD,EAVS,KAUMvC,EAVN,OAW4BoD,mBAAS,MAXrC,mBAWT1C,EAXS,KAWO+B,EAXP,OAYkBW,oBAAS,GAZ3B,mBAYTsB,EAZS,KAYE3E,EAZF,KAchB,OACE,yBAAKE,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQF,aAAcA,EAAcC,iBAAkBA,IAEtD,kBAAC,EAAD,CACEuC,cAAeA,EACfxC,aAAcA,EACdC,iBAAkBA,EAClByC,kBAAmBA,IAGrB,kBAAC,EAAD,CACE/B,eAAgBA,EAChBX,aAAcA,EACdC,iBAAkBA,IAGnB0E,EAAY,kBAAC,EAAD,MAAc,OAUjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.a7d5946b.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=ceff7dc5-6264-4508-952e-7a3530d8b47f';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\n export async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/object?${KEY}&${term}=${encodeURI(\n        value.split(\"-\").join(\"|\")\n      )}`\n    );\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n *\n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem(\"centuries\")) {\n    return JSON.parse(localStorage.getItem(\"centuries\"));\n  }\n\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem(\"centuries\", JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem(\"classifications\")) {\n    return JSON.parse(localStorage.getItem(\"classifications\"));\n  }\n\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem(\"classifications\", JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from \"react\";\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n/**\n * We need a new component called Searchable which:\n *\n * Has a template like this:\n *\n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n *\n * When someone clicks the anchor tag, you should:\n *\n * - preventDefault on the event\n * - call setIsLoading, set it to true\n *\n * Then start a try/catch/finally block:\n *\n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch:\n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const result = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(result);\n          } catch (error) {\n            console.log(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {searchTerm ? (\n          <>\n            <span className=\"content\">{searchValue}</span>{\" \"}\n          </>\n        ) : null}\n      </a>\n    </span>\n  );\n};\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n *\n * <main id=\"feature\"></main>\n *\n * And like this when one is:\n *\n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n *\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\n * technique, medium, dimensions, people, department, division, contact, creditline\n *\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n *\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n *\n * This component should be exported as default.\n */\nconst Feature = (props) => {\n  if (props.featuredResult) {\n    const {\n      title,\n      dated,\n      description,\n      culture,\n      style,\n      technique,\n      medium,\n      dimensions,\n      people,\n      department,\n      division,\n      contact,\n      creditline,\n      images,\n      primaryimageurl,\n    } = props.featuredResult;\n    return (\n      <main id=\"feature\">\n        <div className=\"object-feature\">\n          <header>\n            <h3>{title}</h3>\n            <h4>{dated}</h4>\n          </header>\n          <section className=\"facts\">\n            {description ? (\n              <>\n                <span className=\"title\">{\"Description\"}</span>\n                <span className=\"content\">{description}</span>{\" \"}\n              </>\n            ) : null}\n            {culture ? (\n              <>\n                <span className=\"title\">{\"culture\"}</span>\n                <Searchable\n                  searchTerm=\"culture\"\n                  searchValue={culture}\n                  {...props}\n                />{\" \"}\n              </>\n            ) : null}\n            {style ? (\n              <>\n                <span className=\"title\">{\"Style\"}</span>\n                <span className=\"content\">{style}</span>{\" \"}\n              </>\n            ) : null}\n            {technique ? (\n              <>\n                <span className=\"title\">{\"Technique\"}</span>\n                <span className=\"content\">\n                  {\n                    <Searchable\n                      searchTerm={\"Technique\"}\n                      searchValue={technique}\n                      {...props}\n                    />\n                  }\n                </span>{\" \"}\n              </>\n            ) : null}\n            {medium ? (\n              <>\n                <span className=\"title\">{\"Medium\"}</span>\n                <span className=\"content\">\n                  {<Searchable\n                    searchTerm={\"Medium\"}\n                    searchValue={medium}\n                    {...props}\n                    />}\n                </span>{\" \"}\n              </>\n            ) : null}\n            {dimensions ? (\n              <>\n                <span className=\"title\">{\"Dimensions\"}</span>\n                <span className=\"content\">{dimensions}</span>{\" \"}\n              </>\n            ) : null}\n            {people && people.length\n              ? people.map((person) => {\n                  console.log(person);\n                  return (\n                    <Fragment key={person.name}>\n                      <span className=\"title\">{\"Person\"}</span>\n                      <span className=\"content\">{person.displayname}</span>\n                      <Searchable\n                    searchTerm={\"person.displayname\"}\n                    searchValue={person.displayname}\n                    {...props}\n                    />{\" \"}\n                    </Fragment>\n                  );\n                })\n              : null}\n            {department ? (\n              <>\n                <span className=\"title\">{\"Department\"}</span>\n                <span className=\"content\">{department}</span>{\" \"}\n              </>\n            ) : null}\n            {division ? (\n              <>\n                <span className=\"title\">{\"Division\"}</span>\n                <span className=\"content\">{division}</span>{\" \"}\n              </>\n            ) : null}\n            {contact ? (\n              <>\n                <span className=\"title\">{\"Contact\"}</span>\n                <span className=\"content\">{contact}</span>{\" \"}\n              </>\n            ) : null}\n            {creditline ? (\n              <>\n                <span className=\"title\">{\"Creditline\"}</span>\n                <span className=\"content\">{creditline}</span>{\" \"}\n              </>\n            ) : null}\n          </section>\n          <section className=\"photos\">\n            {images.length ? (\n              images.map((image) => {\n                return (\n                  <img\n                    key={image.baseimageurl}\n                    src={image.baseimageurl}\n                    alt={\"image can't be found\"}\n                  />\n                );\n              })\n            ) : primaryimageurl ? (\n              <img src={primaryimageurl} alt={\"image can't be found\"} />\n            ) : null}\n          </section>\n        </div>\n      </main>\n    );\n  } else {\n    return <main id=\"feature\"></main>;\n  }\n};\nexport default Feature;","import React from \"react\";\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n *\n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = () => {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n    </div>\n  );\n};\n\nexport default Loading;","import React from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   *\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  const {\n    searchResults: { info, records },\n    setSearchResults,\n    setFeaturedResult,\n    setIsLoading,\n  } = props;\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          disabled={!info.prev}\n          className=\"previous\"\n          onClick={() => {\n            return fetchPage(info.prev);\n          }}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={() => {\n            return fetchPage(info.next);\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {\n          /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n\n          records.map((record, index) => {\n            return (\n              <div\n                key={index}\n                className=\"object-preview\"\n                onClick={(event) => {\n                  // prevent the default\n                  event.preventDefault();\n                  // set the featured result to be this record, using setFeaturedResult\n                  setFeaturedResult(record);\n                }}\n              >\n                {\n                  // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n\n                  record.primaryimageurl ? (\n                    <img\n                      src={record.primaryimageurl}\n                      alt={record.description}\n                    />\n                  ) : null\n                }\n                {\n                  // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n\n                  record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n                }\n              </div>\n            );\n          })\n        }\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   *\n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    try {\n      Promise.all([fetchAllCenturies(), fetchAllClassifications()]).then(\n        ([centuries, classifications]) => {\n          setCenturyList(centuries);\n          setClassificationList(classifications);\n        }\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        // write code here\n        event.preventDefault();\n        setIsLoading(true);\n\n        try {\n          const results = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          setSearchResults(results);\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event) => {\n            setQueryString(event.target.value);\n          }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => {\n            setClassification(event.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((classification) => {\n            return (\n              <option value={classification.name} key={classification.name}>\n                {classification.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => {\n            setCentury(event.target.value);\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century) => {\n            return (\n              <option value={century.name} key={century.name}>\n                {century.name}\n              </option>\n            );\n          })}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;","import React from \"react\";\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n *\n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = () => {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n};\n\nexport default Title;","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// These imports won't work until you fix ./components/index.js\nimport { Feature, Loading, Preview, Search, Title } from \"./components\";\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className=\"app\">\n      {/* <Title /> is static, doesn't need any props */}\n      <Title />\n      {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n        setFeaturedResult={setFeaturedResult}\n      />\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n      <Feature\n        featuredResult={featuredResult}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n      />\n      {/* <Loading /> is static, but should only render when isLoading is true */}\n      {isLoading ? <Loading /> : null}\n      {/* use a ternary and render null if isLoading is false */}\n    </div>\n  );\n};\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"sourceRoot":""}